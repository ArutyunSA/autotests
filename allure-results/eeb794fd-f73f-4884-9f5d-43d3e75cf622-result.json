{"name": "test_32_cases_661", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <td mat-cell=\"\" class=\"mat-mdc-cell mdc-data-table__cell cdk-cell cdk-column-cancelButton mat-column-cancelButton appointment__row appointment__row--edit ng-star-inserted\">...</td> is not clickable at point (1867, 188). Other element would receive the click: <div class=\"ng-tns-c63-51 ng-star-inserted ng-trigger ng-trigger-flyInOut ngx-toastr toast-error\" toast-component=\"\" style=\"opacity: 1;\">...</div>\n  (Session info: chrome=124.0.6367.61)\nStacktrace:\n\tGetHandleVerifier [0x00007FF656C71502+60802]\n\t(No symbol) [0x00007FF656BEAC02]\n\t(No symbol) [0x00007FF656AA7CE4]\n\t(No symbol) [0x00007FF656AFE877]\n\t(No symbol) [0x00007FF656AFC344]\n\t(No symbol) [0x00007FF656AF980A]\n\t(No symbol) [0x00007FF656AF89E2]\n\t(No symbol) [0x00007FF656AEAE8B]\n\t(No symbol) [0x00007FF656B1AB7A]\n\t(No symbol) [0x00007FF656AEA7C6]\n\t(No symbol) [0x00007FF656B1AD90]\n\t(No symbol) [0x00007FF656B3A224]\n\t(No symbol) [0x00007FF656B1A923]\n\t(No symbol) [0x00007FF656AE8FEC]\n\t(No symbol) [0x00007FF656AE9C21]\n\tGetHandleVerifier [0x00007FF656F7411D+3217821]\n\tGetHandleVerifier [0x00007FF656FB60B7+3488055]\n\tGetHandleVerifier [0x00007FF656FAF03F+3459263]\n\tGetHandleVerifier [0x00007FF656D2B846+823494]\n\t(No symbol) [0x00007FF656BF5F9F]\n\t(No symbol) [0x00007FF656BF0EC4]\n\t(No symbol) [0x00007FF656BF1052]\n\t(No symbol) [0x00007FF656BE18A4]\n\tBaseThreadInitThunk [0x00007FFE0AB37344+20]\n\tRtlUserThreadStart [0x00007FFE0C0426B1+33]", "trace": "criptoPro = None\n\n    @pytest.mark.regress_tap\n    @pytest.mark.smoke_tap\n    def test_32_cases_661(criptoPro):\n        case_name('Отмена рецепта после подписания')\n        #Перехожу по ссылке в ТАП\n        browser.get(url_TAP)\n        browser.implicitly_wait(20)\n    \n        f = ContractsPage(browser)\n    \n        step('Шаг 1: Выбрать назначение из списка или создать новое')\n        test_1_cases_create_purpose()\n        true_step('ОР: - Назначение выбрано/Создано')\n        if f.enabled(BT_add_recipe):\n            true_step('    - Кнопка \"Добавить\" в блоке \"Рецепты\" стала доступна')\n        else:\n            false_step('Ошибка: Кнопка добавить в блоке \"Рецепты\" недоступна')\n    \n        step('Шаг 2: Нажать на кнопку \"Добавить\" в блоке \"Рецепты\"')\n        f.click_element(BT_add_recipe)\n    \n        time.sleep(1)\n        pyautogui.press('LEFT')\n        time.sleep(1)\n        pyautogui.press('ENTER')\n        time.sleep(3)\n        if f.enabled(FM_recipe):\n            true_step('ОР: Открылась форма создания рецептов')\n        else:\n            false_step('Ошибка: Форма создания рецепта недоступна')\n    \n        step('Шаг 3: Выбрать чек-бокс \"Коммерческий\"')\n        f.click_element(CH_comm)\n        time.sleep(2)\n        if f.enabled(CH_comm):\n            true_step('ОР: Чек-бокс выбран')\n        else:\n            false_step('Ошибка: Чек- бокс не выбран')\n    \n        step('Шаг 4: Проверить автоматическое заполнение обязательных полей и доступность')\n        OB_form_recipe_commerchesky()\n    \n        step('Шаг 5: Установить признак \"Электронный\"')\n        f.click_element(CH_electronic_recipe)\n        if f.enabled(CH_electronic_recipe):\n            true_step('ОР: Признак установлен')\n        else:\n            false_step('Ошибка: Радиокнопка не выбрана')\n    \n        step('Шаг 6: Нажать на кнопку \"Сохранить\"')\n        f.click_element(BT_save_recipe)\n        time.sleep(3)\n        if f.text(ER) == 'Рецепт успешно сохранен':\n            true_step('ОР: Рецепт сохранен')\n        else:\n            false_step('Ошибка: Отсутствует сообщение об успешном сохранении')\n    \n        step('Шаг 7: Нажать на кнопку \"Подпись врача\"')\n        f.click_element(BT_caption_recipe)\n        time.sleep(5)\n        if f.element_absent(BT_caption_recipe) and f.text(ST_recipe_grid) == 'Сформирован':\n            true_step('ОР: Рецепт подписан. Кнопка \"Подпись врача\" стала недоступной.')\n        else:\n            false_step('Ошибка: Рецепт не подписан')\n    \n        step('Шаг 8: У рецепта нажать кнопку \"Отменить\"')\n>       f.click_element(BT_cancel_recipe)\n\nautotest\\tests\\test_TAP.py:2253: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nautotest\\tests\\config\\function.py:17: in click_element\n    self.browser.find_element(*element).click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025E833D12B0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF656BE18A4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE0AB37344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE0C0426B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <td mat-cell=\"\" class=\"mat-mdc-cell mdc-data-table__cell cdk-cell cdk-column-cancelButton mat-column-cancelButton appointment__row appointment__row--edit ng-star-inserted\">...</td> is not clickable at point (1867, 188). Other element would receive the click: <div class=\"ng-tns-c63-51 ng-star-inserted ng-trigger ng-trigger-flyInOut ngx-toastr toast-error\" toast-component=\"\" style=\"opacity: 1;\">...</div>\nE         (Session info: chrome=124.0.6367.61)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF656C71502+60802]\nE       \t(No symbol) [0x00007FF656BEAC02]\nE       \t(No symbol) [0x00007FF656AA7CE4]\nE       \t(No symbol) [0x00007FF656AFE877]\nE       \t(No symbol) [0x00007FF656AFC344]\nE       \t(No symbol) [0x00007FF656AF980A]\nE       \t(No symbol) [0x00007FF656AF89E2]\nE       \t(No symbol) [0x00007FF656AEAE8B]\nE       \t(No symbol) [0x00007FF656B1AB7A]\nE       \t(No symbol) [0x00007FF656AEA7C6]\nE       \t(No symbol) [0x00007FF656B1AD90]\nE       \t(No symbol) [0x00007FF656B3A224]\nE       \t(No symbol) [0x00007FF656B1A923]\nE       \t(No symbol) [0x00007FF656AE8FEC]\nE       \t(No symbol) [0x00007FF656AE9C21]\nE       \tGetHandleVerifier [0x00007FF656F7411D+3217821]\nE       \tGetHandleVerifier [0x00007FF656FB60B7+3488055]\nE       \tGetHandleVerifier [0x00007FF656FAF03F+3459263]\nE       \tGetHandleVerifier [0x00007FF656D2B846+823494]\nE       \t(No symbol) [0x00007FF656BF5F9F]\nE       \t(No symbol) [0x00007FF656BF0EC4]\nE       \t(No symbol) [0x00007FF656BF1052]\nE       \t(No symbol) [0x00007FF656BE18A4]\nE       \tBaseThreadInitThunk [0x00007FFE0AB37344+20]\nE       \tRtlUserThreadStart [0x00007FFE0C0426B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "stdout", "source": "e9ad097e-b055-4f6d-8b00-208b9a261972-attachment.txt", "type": "text/plain"}], "start": 1714132981133, "stop": 1714133019100, "uuid": "dccd6b0c-cb9f-4e21-9424-2fc23bec3d78", "historyId": "2b4d17ee59ed666811d96532198e00db", "testCaseId": "2b4d17ee59ed666811d96532198e00db", "fullName": "autotest.tests.test_TAP#test_32_cases_661", "labels": [{"name": "tag", "value": "smoke_tap"}, {"name": "tag", "value": "regress_tap"}, {"name": "parentSuite", "value": "autotest.tests"}, {"name": "suite", "value": "test_TAP"}, {"name": "host", "value": "Arutyun"}, {"name": "thread", "value": "14064-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "autotest.tests.test_TAP"}]}